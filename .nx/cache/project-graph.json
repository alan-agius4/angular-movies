{
  "nodes": {
    "ng-universal-express": {
      "name": "ng-universal-express",
      "type": "app",
      "data": {
        "root": "projects/ng-universal-express",
        "targets": {
          "build": {
            "executor": "@angular-devkit/build-angular:server",
            "dependsOn": ["^build"],
            "inputs": ["production", "^production"],
            "outputs": ["{workspaceRoot}/dist/projects/movies/server"],
            "options": {
              "deleteOutputPath": false,
              "outputHashing": "media",
              "namedChunks": true,
              "sourceMap": true,
              "outputPath": "dist/projects/movies/server",
              "main": "projects/ng-universal-express/src/index.ts",
              "tsConfig": "projects/ng-universal-express/tsconfig.app.json",
              "inlineStyleLanguage": "scss"
            },
            "configurations": {
              "production": {
                "sourceMap": false,
                "fileReplacements": [
                  {
                    "replace": "projects/movies/src/environments/environment.ts",
                    "with": "projects/movies/src/environments/environment.production.ts"
                  }
                ]
              },
              "serve-production": {
                "sourceMap": false,
                "fileReplacements": [
                  {
                    "replace": "projects/movies/src/environments/environment.ts",
                    "with": "projects/movies/src/environments/environment.production.ts"
                  }
                ],
                "main": "projects/ng-universal-express/src/main.ts",
                "tsConfig": "projects/ng-universal-express/tsconfig.serve.json"
              },
              "development": {
                "buildOptimizer": false,
                "optimization": false,
                "sourceMap": true,
                "extractLicenses": false,
                "vendorChunk": true
              },
              "serve-development": {
                "buildOptimizer": false,
                "optimization": false,
                "sourceMap": true,
                "extractLicenses": false,
                "vendorChunk": true,
                "main": "projects/ng-universal-express/src/main.ts",
                "tsConfig": "projects/ng-universal-express/tsconfig.serve.json"
              }
            },
            "defaultConfiguration": "production"
          },
          "lint": {
            "executor": "@nx/linter:eslint",
            "inputs": ["default", "{workspaceRoot}/.eslintrc.json"],
            "outputs": ["{options.outputFile}"],
            "options": {
              "lintFilePatterns": ["projects/ng-universal-express/**/*.ts"]
            },
            "configurations": {}
          },
          "test": {
            "executor": "@nx/jest:jest",
            "inputs": [
              "default",
              "^production",
              "{workspaceRoot}/jest.preset.js"
            ],
            "outputs": ["{workspaceRoot}/dist/coverage/ng-universal-express"],
            "options": {
              "jestConfig": "projects/ng-universal-express/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {
              "ci": {
                "ci": true,
                "codeCoverage": true
              }
            }
          },
          "emulate-firebase": {
            "executor": "nx:run-commands",
            "dependsOn": ["build"],
            "options": {
              "commands": [
                "nx prerender ng-universal-express",
                "firebase emulators:start --only hosting --project angular-movies"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "serve": {
            "executor": "@nguniversal/builders:ssr-dev-server",
            "options": {
              "port": 4300
            },
            "configurations": {
              "development": {
                "browserTarget": "movies:build:development",
                "serverTarget": "ng-universal-express:build:serve-development"
              },
              "development-prerender": {
                "port": 4310,
                "browserTarget": "movies:build:development",
                "serverTarget": "ng-universal-express:build:serve-development"
              },
              "production": {
                "port": 4301,
                "browserTarget": "movies:build:production",
                "serverTarget": "ng-universal-express:build:serve-production"
              }
            },
            "defaultConfiguration": "development"
          },
          "pre-prerender": {
            "outputs": ["{workspaceRoot}/dist/projects/movies/server"],
            "executor": "nx:run-commands",
            "options": {
              "commands": [
                "npx ts-node -P projects/ng-universal-express/tsconfig.tooling.json ./projects/ng-universal-express/tooling/generate-routes/bin.ts --source-file=./projects/ng-universal-express/routes.base.txt --target-file=./dist/tmp/routes.txt"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "prerender": {
            "dependsOn": ["pre-prerender"],
            "outputs": ["{workspaceRoot}/dist/projects/movies/browser"],
            "executor": "@nguniversal/builders:prerender",
            "options": {
              "routesFile": "dist/tmp/routes.txt"
            },
            "configurations": {
              "production": {
                "browserTarget": "movies:build:production",
                "serverTarget": "ng-universal-express:build:production"
              }
            },
            "defaultConfiguration": "production"
          },
          "user-flow": {
            "executor": "@push-based/user-flow-nx-plugin:user-flow",
            "outputs": ["{options.outputPath}"],
            "options": {
              "url": "http://localhost:4300",
              "rcPath": "projects/ng-universal-express/.user-flowrc.json",
              "outputPath": "dist/user-flow/ng-universal-express",
              "ufPath": "projects/ng-universal-express/user-flows",
              "format": ["html"]
            },
            "configurations": {
              "development": {
                "verbose": true,
                "dryRun": true,
                "url": "http://127.0.0.1:4202",
                "serveCommand": "nx run ng-universal-express:serve:production-prerender",
                "awaitServeStdout": " Other reserved ports"
              },
              "production": {
                "verbose": true,
                "dryRun": false,
                "url": "http://127.0.0.1:4301",
                "serveCommand": "nx run ng-universal-express:serve:production",
                "awaitServeStdout": "Angular Universal Live Development Server is listening on"
              },
              "development-serve-ssr": {
                "url": "http://localhost:4310",
                "serveCommand": "nx run ng-universal-express:serve:development-prerender",
                "awaitServeStdout": "Angular Universal Live Development Server is listening on"
              },
              "production-serve-ssr": {
                "url": "http://localhost:4310",
                "serveCommand": "nx run ng-universal-express:serve:production-prerender",
                "awaitServeStdout": "Angular Universal Live Development Server is listening on"
              },
              "emulated": {
                "url": "http://127.0.0.1:5002",
                "serveCommand": "nx run ng-universal-express:emulate-firebase",
                "awaitServeStdout": "âœ”  hosting[angular-movies-a12d3]: Local server:"
              },
              "firebase-preview": {
                "ufPath": "projects/movies-user-flows/user-flows"
              }
            },
            "defaultConfiguration": "production"
          }
        },
        "name": "ng-universal-express",
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "projects/ng-universal-express/src",
        "projectType": "application",
        "tags": ["scope:server", "type:app"],
        "implicitDependencies": []
      }
    },
    "cloudflare-worker": {
      "name": "cloudflare-worker",
      "type": "app",
      "data": {
        "root": "projects/cloudflare-worker",
        "targets": {
          "build": {
            "executor": "nx:run-commands",
            "dependsOn": ["^build"],
            "inputs": ["production", "^production"],
            "outputs": ["{workspaceRoot}/dist/tmp/_worker"],
            "options": {
              "commands": [
                "nx build movies",
                "nx pre-build cloudflare-worker",
                "node projects/cloudflare-worker/tooling/copy-files.mjs --source=dist/projects/movies/browser --target=dist/tmp/_worker",
                "node projects/cloudflare-worker/tooling/copy-files.mjs --source=dist/tmp/_worker --target=dist/projects/movies/worker",
                "node projects/cloudflare-worker/tooling/bundle.mjs --target=dist/projects/movies/worker"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "lint": {
            "executor": "@nx/linter:eslint",
            "inputs": ["default", "{workspaceRoot}/.eslintrc.json"],
            "outputs": ["{options.outputFile}"],
            "options": {
              "lintFilePatterns": ["projects/cloudflare-worker/**/*.ts"]
            },
            "configurations": {}
          },
          "pre-build": {
            "outputs": ["{options.outputPath}"],
            "executor": "@angular-devkit/build-angular:server",
            "options": {
              "outputPath": "dist/tmp/_worker",
              "main": "projects/cloudflare-worker/src/index.ts",
              "tsConfig": "projects/cloudflare-worker/tsconfig.worker.json",
              "outputHashing": "media",
              "sourceMap": true,
              "extractLicenses": true,
              "optimization": true,
              "buildOptimizer": true
            },
            "configurations": {
              "development": {
                "outputHashing": "none",
                "optimization": false,
                "sourceMap": true,
                "extractLicenses": true,
                "vendorChunk": true,
                "buildOptimizer": false
              },
              "production": {
                "fileReplacements": [
                  {
                    "replace": "projects/movies/src/environments/environment.ts",
                    "with": "projects/movies/src/environments/environment.production.ts"
                  }
                ]
              }
            },
            "defaultConfiguration": "production"
          },
          "serve": {
            "dependsOn": ["build"],
            "executor": "nx:run-commands",
            "options": {
              "commands": ["nx run cloudflare-worker:emulate:production"],
              "parallel": false
            },
            "configurations": {}
          },
          "emulate": {
            "dependsOn": ["build"],
            "executor": "nx:run-commands",
            "options": {
              "commands": [
                "wrangler pages dev dist/projects/movies/worker --compatibility-date=2021-09-20 --port=4501"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "cloudflare-deploy": {
            "dependsOn": ["build"],
            "executor": "nx:run-commands",
            "options": {
              "commands": [
                "wrangler pages deploy dist/projects/movies/worker --skip-caching"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "user-flow": {
            "executor": "@push-based/user-flow-nx-plugin:user-flow",
            "options": {
              "rcPath": "projects/cloudflare-worker/.user-flowrc.action-hack.json",
              "outputPath": "dist/user-flow/cloudflare-worker",
              "ufPath": "projects/cloudflare-worker/user-flows/ci-flow.uf.ts",
              "format": ["html"]
            },
            "configurations": {
              "production": {
                "url": "http://127.0.0.1:4501/",
                "serveCommand": "nx run cloudflare-worker:emulate",
                "awaitServeStdout": "[mf:inf] Ready on"
              }
            },
            "defaultConfiguration": "production"
          }
        },
        "name": "cloudflare-worker",
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "projects/cloudflare-worker/src",
        "projectType": "application",
        "tags": ["scope:server", "type:app"],
        "implicitDependencies": ["movies"]
      }
    },
    "firebase-function": {
      "name": "firebase-function",
      "type": "app",
      "data": {
        "root": "projects/firebase-function",
        "targets": {
          "build": {
            "executor": "@nx/webpack:webpack",
            "dependsOn": ["^build"],
            "inputs": ["production", "^production"],
            "outputs": ["{options.outputPath}"],
            "options": {
              "target": "node",
              "compiler": "tsc",
              "deleteOutputPath": false,
              "outputPath": "./dist/projects/movies/server",
              "outputFileName": "index.js",
              "main": "projects/firebase-function/src/index.ts",
              "tsConfig": "./projects/firebase-function/tsconfig.function.json"
            },
            "configurations": {
              "production": {
                "optimization": true,
                "sourceMap": true
              },
              "development": {
                "optimization": false,
                "sourceMap": false
              },
              "stats": {
                "optimization": true,
                "statsJson": true
              }
            }
          },
          "lint": {
            "executor": "@nx/linter:eslint",
            "inputs": ["default", "{workspaceRoot}/.eslintrc.json"],
            "outputs": ["{options.outputFile}"],
            "options": {
              "lintFilePatterns": ["projects/firebase-function/**/*.ts"]
            },
            "configurations": {}
          },
          "test": {
            "executor": "@nx/jest:jest",
            "inputs": [
              "default",
              "^production",
              "{workspaceRoot}/jest.preset.js"
            ],
            "outputs": ["{workspaceRoot}/dist/coverage/firebase-function"],
            "options": {
              "jestConfig": "projects/firebase-function/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {
              "ci": {
                "ci": true,
                "codeCoverage": true
              }
            }
          },
          "deploy-firebase": {
            "executor": "nx:run-commands",
            "dependsOn": ["build"],
            "options": {
              "commands": [
                "npx firebase --project=angular-movies --config=firebase.function.json deploy --only=functions "
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "serve": {
            "executor": "nx:run-commands",
            "options": {
              "commands": [
                "nx run firebase-function:build",
                "nx emulate firebase-function"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "deploy": {
            "executor": "nx:run-commands",
            "dependsOn": ["build"],
            "options": {
              "commands": ["npx firebase deploy --project angular-movies"],
              "parallel": false
            },
            "configurations": {}
          },
          "emulate": {
            "executor": "nx:run-commands",
            "options": {
              "commands": [
                "npx firebase --project=angular-movies --config=firebase.function.json emulators:start"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "user-flow": {
            "executor": "@push-based/user-flow-nx-plugin:user-flow",
            "outputs": ["{options.outputPath}"],
            "options": {
              "url": "http://127.0.0.1:4402/angular-movies-a12d3/us-central1/ssr",
              "rcPath": "projects/firebase-function/.user-flowrc.json",
              "outputPath": "dist/user-flow/firebase-function",
              "ufPath": "projects/firebase-function/user-flows",
              "serveCommand": "nx run firebase-function:serve",
              "awaitServeStdout": "Other reserved ports",
              "format": ["html"]
            },
            "configurations": {
              "development": {
                "verbose": true,
                "dryRun": true
              },
              "production": {
                "verbose": true,
                "dryRun": false
              }
            },
            "defaultConfiguration": "development"
          }
        },
        "name": "firebase-function",
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "projects/firebase-function/src",
        "projectType": "application",
        "tags": ["scope:server", "type:app"],
        "implicitDependencies": ["ng-universal-express"]
      }
    },
    "movies-user-flows": {
      "name": "movies-user-flows",
      "type": "lib",
      "data": {
        "root": "projects/movies-user-flows",
        "name": "movies-user-flows",
        "targets": {
          "nx-release-publish": {
            "dependsOn": ["^nx-release-publish"],
            "executor": "@nx/js:release-publish",
            "options": {},
            "configurations": {}
          },
          "build-lib": {
            "dependsOn": [],
            "executor": "@nx/js:tsc",
            "outputs": ["{options.outputPath}"],
            "options": {
              "outputPath": "dist/projects/movies-user-flows",
              "main": "movies-user-flows/src/index.ts",
              "tsConfig": "movies-user-flows/tsconfig.lib.json",
              "assets": [],
              "updateBuildableProjectDepsInPackageJson": true
            },
            "configurations": {}
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "movies-user-flows/src",
        "projectType": "library",
        "tags": ["scope:shared", "type:util"],
        "implicitDependencies": []
      }
    },
    "test-selectors": {
      "name": "test-selectors",
      "type": "lib",
      "data": {
        "root": "projects/test-selectors",
        "targets": {
          "lint": {
            "executor": "@nx/linter:eslint",
            "inputs": ["default", "{workspaceRoot}/.eslintrc.json"],
            "outputs": ["{options.outputFile}"],
            "options": {
              "lintFilePatterns": [
                "projects/test-selectors/**/*.ts",
                "projects/test-selectors/**/*.html"
              ]
            },
            "configurations": {}
          }
        },
        "name": "test-selectors",
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "projects/test-selectors/src",
        "prefix": "lib",
        "projectType": "library",
        "tags": [],
        "implicitDependencies": []
      }
    },
    "movies": {
      "name": "movies",
      "type": "app",
      "data": {
        "root": "projects/movies",
        "targets": {
          "build": {
            "executor": "@angular-devkit/build-angular:application",
            "dependsOn": ["^build"],
            "inputs": ["production", "^production"],
            "options": {
              "outputPath": "dist/projects/movies/browser",
              "index": "projects/movies/src/index.html",
              "main": "projects/movies/src/main.ts",
              "tsConfig": "projects/movies/tsconfig.app.json",
              "inlineStyleLanguage": "scss",
              "namedChunks": true,
              "assets": [
                "projects/movies/src/favicon.ico",
                "projects/movies/src/manifest.json",
                "projects/movies/src/manifest.webmanifest",
                "projects/movies/src/assets",
                "projects/movies/src/_routes.json"
              ],
              "styles": ["projects/movies/src/styles.scss"],
              "scripts": []
            },
            "configurations": {
              "development": {
                "namedChunks": true,
                "sourceMap": true,
                "vendorChunk": true,
                "extractLicenses": false,
                "buildOptimizer": false,
                "optimization": false,
                "serviceWorker": false
              },
              "stats": {
                "statsJson": true,
                "namedChunks": true,
                "sourceMap": true,
                "extractLicenses": false,
                "buildOptimizer": false,
                "optimization": false,
                "serviceWorker": false,
                "budgets": false
              },
              "production": {
                "serviceWorker": true,
                "ngswConfigPath": "projects/movies/src/ngsw-config.json",
                "fileReplacements": [
                  {
                    "replace": "projects/movies/src/environments/environment.ts",
                    "with": "projects/movies/src/environments/environment.production.ts"
                  }
                ],
                "budgets": [
                  {
                    "type": "initial",
                    "maximumWarning": "351kb",
                    "maximumError": "352KB"
                  },
                  {
                    "type": "bundle",
                    "name": "main",
                    "maximumWarning": "343KB",
                    "maximumError": "344KB"
                  },
                  {
                    "type": "anyComponentStyle",
                    "maximumWarning": "3000b",
                    "maximumError": "4.5kb"
                  },
                  {
                    "type": "bundle",
                    "name": "styles",
                    "maximumWarning": "6320b",
                    "maximumError": "6.18KB"
                  },
                  {
                    "type": "bundle",
                    "name": "common",
                    "maximumWarning": "10KB",
                    "maximumError": "11.22KB"
                  },
                  {
                    "type": "bundle",
                    "name": "polyfills",
                    "maximumWarning": "118b",
                    "maximumError": "118b"
                  }
                ]
              }
            },
            "defaultConfiguration": "production",
            "outputs": ["{options.outputPath}"]
          },
          "lint": {
            "executor": "@angular-eslint/builder:lint",
            "inputs": ["default", "{workspaceRoot}/.eslintrc.json"],
            "options": {
              "lintFilePatterns": [
                "projects/movies/src/app/**/*.ts",
                "projects/movies/src/app/**/*.html"
              ]
            },
            "outputs": ["{options.outputFile}"],
            "configurations": {}
          },
          "emulate-firebase": {
            "executor": "nx:run-commands",
            "dependsOn": ["build"],
            "options": {
              "commands": [
                "firebase emulators:start --only hosting --project angular-movies"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "deploy-firebase": {
            "executor": "nx:run-commands",
            "dependsOn": ["build"],
            "options": {
              "commands": [
                "nx prerender ng-universal-express",
                "npx firebase --config=firebase.json deploy --only=hosting --project=angular-movies"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "build-esbuild": {
            "executor": "@angular-devkit/build-angular:browser-esbuild",
            "options": {
              "outputPath": "dist/projects/movies/browser",
              "index": "projects/movies/src/index.html",
              "main": "projects/movies/src/main.ts",
              "tsConfig": "projects/movies/tsconfig.app.json",
              "inlineStyleLanguage": "scss",
              "namedChunks": true,
              "assets": [
                "projects/movies/src/favicon.ico",
                "projects/movies/src/manifest.json",
                "projects/movies/src/manifest.webmanifest",
                "projects/movies/src/assets",
                "projects/movies/src/_routes.json"
              ],
              "styles": ["projects/movies/src/styles.scss"],
              "scripts": []
            },
            "configurations": {
              "development": {
                "namedChunks": true,
                "sourceMap": true,
                "vendorChunk": true,
                "extractLicenses": false,
                "buildOptimizer": false,
                "optimization": false,
                "serviceWorker": false
              },
              "production": {
                "serviceWorker": true,
                "ngswConfigPath": "projects/movies/src/ngsw-config.json",
                "fileReplacements": [
                  {
                    "replace": "projects/movies/src/environments/environment.ts",
                    "with": "projects/movies/src/environments/environment.production.ts"
                  }
                ]
              }
            },
            "defaultConfiguration": "production",
            "outputs": ["{options.outputPath}"]
          },
          "serve": {
            "executor": "@angular-devkit/build-angular:dev-server",
            "options": {
              "port": 4200
            },
            "configurations": {
              "development": {
                "browserTarget": "movies:build:development"
              },
              "production": {
                "port": 4201,
                "browserTarget": "movies:build:production"
              }
            },
            "defaultConfiguration": "development"
          },
          "ngsw-config": {
            "executor": "nx:run-commands",
            "options": {
              "commands": [
                "node_modules/.bin/ngsw-config dist ./src/ngsw-config.json"
              ]
            },
            "configurations": {}
          },
          "serve-ngsw": {
            "executor": "nx:run-commands",
            "options": {
              "commands": ["npm run ngsw-config && http-server dist -p 8080"]
            },
            "configurations": {}
          },
          "extract-i18n": {
            "executor": "@angular-devkit/build-angular:extract-i18n",
            "options": {
              "browserTarget": "movies:build"
            },
            "configurations": {}
          },
          "user-flow": {
            "executor": "@push-based/user-flow-nx-plugin:user-flow",
            "outputs": ["{options.outputPath}"],
            "options": {
              "url": "http://localhost:4200",
              "rcPath": "projects/movies/.user-flowrc.json",
              "outputPath": "dist/user-flow/movies",
              "ufPath": "projects/movies/user-flows",
              "format": ["html"]
            },
            "configurations": {
              "development": {
                "verbose": true,
                "dryRun": true,
                "serveCommand": "nx run movies:serve:development",
                "awaitServeStdout": "Angular Live Development Server is listening on"
              },
              "production": {
                "verbose": true,
                "url": "http://localhost:4201",
                "serveCommand": "nx run movies:serve:production",
                "awaitServeStdout": "Angular Live Development Server is listening on"
              }
            },
            "defaultConfiguration": "production"
          }
        },
        "name": "movies",
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "projectType": "application",
        "sourceRoot": "projects/movies/src",
        "tags": ["scope:client", "type:app"],
        "generators": {
          "@schematics/angular:component": {
            "style": "scss",
            "changeDetection": "OnPush"
          },
          "@schematics/angular:application": {
            "strict": true
          }
        },
        "implicitDependencies": []
      }
    },
    "docs": {
      "name": "docs",
      "type": "lib",
      "data": {
        "root": "projects/docs",
        "targets": {
          "build": {
            "executor": "nx:run-commands",
            "dependsOn": ["^build"],
            "inputs": ["production", "^production"],
            "outputs": ["{projectRoot}/README.md"],
            "options": {
              "commands": [
                "nx run docs:generate-bundle-audit",
                "nx run docs:update-readme"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "lint": {
            "executor": "@nx/linter:eslint",
            "inputs": ["default", "{workspaceRoot}/.eslintrc.json"],
            "outputs": ["{options.outputFile}"],
            "options": {
              "lintFilePatterns": [
                "projects/docs/src/**/*.md",
                "projects/docs/tooling/**/*.ts"
              ]
            },
            "configurations": {}
          },
          "generate-bundle-audit": {
            "executor": "nx:run-commands",
            "options": {
              "commands": [
                "nx build movies --configuration production --stats-json --outputPath=dist/measures/movies",
                "npx cpx dist/tmp/stats-movies/stats.json dist/measures/movies",
                "npx webpack-bundle-analyzer dist/measures/movies/stats.json -m static -r dist/measures/movies/bundle-size-report.prod.html"
              ],
              "parallel": false
            },
            "configurations": {}
          },
          "update-readme": {
            "executor": "nx:run-commands",
            "options": {
              "command": "npx ts-node -P ./projects/docs/tsconfig.tooling.json  ./projects/docs/tooling/bundle-stats/index.ts update-bundle-stats --stats=./dist/measures/movies/stats.json --target=./README.md --source=./projects/docs/src/static/BASE_README.md",
              "parallel": false
            },
            "configurations": {}
          }
        },
        "name": "docs",
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "movies-user-flows/src",
        "projectType": "library",
        "tags": ["scope:shared", "type:util"],
        "implicitDependencies": ["movies"]
      }
    }
  },
  "externalNodes": {},
  "dependencies": {
    "ng-universal-express": [
      {
        "source": "ng-universal-express",
        "target": "movies",
        "type": "static"
      },
      {
        "source": "ng-universal-express",
        "target": "test-selectors",
        "type": "static"
      },
      {
        "source": "ng-universal-express",
        "target": "movies-user-flows",
        "type": "static"
      }
    ],
    "cloudflare-worker": [
      {
        "source": "cloudflare-worker",
        "target": "movies",
        "type": "implicit"
      },
      {
        "source": "cloudflare-worker",
        "target": "movies",
        "type": "static"
      },
      {
        "source": "cloudflare-worker",
        "target": "movies-user-flows",
        "type": "static"
      }
    ],
    "firebase-function": [
      {
        "source": "firebase-function",
        "target": "ng-universal-express",
        "type": "implicit"
      },
      {
        "source": "firebase-function",
        "target": "movies-user-flows",
        "type": "static"
      }
    ],
    "movies-user-flows": [
      {
        "source": "movies-user-flows",
        "target": "test-selectors",
        "type": "static"
      }
    ],
    "test-selectors": [],
    "movies": [
      {
        "source": "movies",
        "target": "movies-user-flows",
        "type": "static"
      }
    ],
    "docs": [
      {
        "source": "docs",
        "target": "movies",
        "type": "implicit"
      }
    ]
  },
  "version": "6.0"
}
